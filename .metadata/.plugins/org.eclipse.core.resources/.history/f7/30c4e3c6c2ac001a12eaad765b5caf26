package inhatc.capstone.crawl.controller;


import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import inhatc.capstone.cmd.service.CmdService;
import inhatc.capstone.cmd.service.CmdServiceImpl;
import inhatc.capstone.cmd.service.MV_Rank_DTO;
import inhatc.capstone.common.map.CommandMap;
import inhatc.capstone.crawl.service.CrawlService;
import inhatc.capstone.crawl.service.CrawlServiceImpl;
import inhatc.capstone.crawl.service.DayService;
import sun.util.calendar.Gregorian;




@Controller
public class CrawlController {
	Logger log = Logger.getLogger(this.getClass());
	
	@Resource(name="crawlService")
	CrawlService crawlService;
	
	
	@SuppressWarnings("null")
	@RequestMapping(value="/crawl/openCrawlPage.do")
    public ModelAndView openMovieSearchResult() throws Exception{
		
		List<List<String>> data = null;
		
		DayService DS = new DayService();
		DS.setDay();
		
		String defaultPath = "C:\\_Routine\\WorkBench\\crawl\\boxOffice\\boxOffice_";
		String filePath = defaultPath + DS.getToday() + ".csv";
		
		File f = new File(filePath);
		if(f.exists()) {
			
		}else {

			filePath = "";
			filePath = defaultPath + DS.getYesday() + ".csv";
		}

		String path = filePath; //csv 파일 경로 설정

		System.out.println("in");
		try {
			CrawlServiceImpl cs = new CrawlServiceImpl();
			cs.readCSV(path);

			data = cs.getCSV();
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e);
		} 
		
		int dataYLen = data.size();
		int dataXLen = data.get(1).size();

		String[][] str = new String[dataYLen-1][dataXLen-1];
		for (int i = 0; i < dataYLen-1; i++) {
			String[] a = (String[]) data.get(i+1).toArray();
			for (int j = 0; j < dataXLen-1; j++) {
				
				String tmp = a[j+1];
				str[i][j] = tmp;
				
				
			}
			
		}
		
		
		String[][] tmp = new String[dataXLen-1][dataYLen-1];
		for (int i = 0; i < dataYLen-1; i++) {
			for (int j = 0; j < dataXLen-1; j++) {
				tmp[j][i] = str[i][j];
			}
		}
		
		List<List<String>> attendanceData = new ArrayList<List<String>>(); //attendance 관객수
		for (int i = 0; i < dataXLen-1; i++) {
			List<String> tmpList = new ArrayList<String>();
			String[] array = new String[dataYLen-1];
			for (int j = 0; j < dataYLen-1; j++) {
                array[j] = tmp[i][j];
			}
			tmpList = Arrays.asList(array);
            attendanceData.add(tmpList);
		}
		CmdService cmdService = new CmdServiceImpl();

		int len = 3;
		ArrayList<MV_Rank_DTO> naver = new ArrayList<MV_Rank_DTO>();
		ArrayList<MV_Rank_DTO> daum = new ArrayList<MV_Rank_DTO>();
		ArrayList<MV_Rank_DTO> nate = new ArrayList<MV_Rank_DTO>();

		for (int i = 0; i < len; i++) {

			if(i==0) {
				naver = cmdService.execCMD_MV_Rank(cmdService.inputCommand(i));
			}else if(i==1) {
				daum = cmdService.execCMD_MV_Rank(cmdService.inputCommand(i));
			}else if(i==2) {
				nate = cmdService.execCMD_MV_Rank(cmdService.inputCommand(i));
			}
			
		}
		
		ModelAndView mv = new ModelAndView("crawl/crawlPage");
		mv.addObject("naverCrawl",naver);
		mv.addObject("daumCrawl",daum);
		mv.addObject("nateCrawl",nate);
		mv.addObject("boxoffice",data);
		mv.addObject("attendance",attendanceData);
        return mv;
    }
	
}
